
def f(reserved):
    mapping = {
        "???R????????L???????????????????????????????????": 16078,
        "?????????????????????????????R???????????R??????": 1764,
        "?????????????????????U??????????????????????????": 18932,
        "????????????????????????????????????????????????": 88418,
        "???????????????????????????????????????????????L": 42771,
        "??????????????????????????????????????????????L?": 50786,
        "??????????????????????????????????????????????R?": 0,
        "???????????L????????????????????????????????????": 13048,
        "???????????????????????????????????????????????D": 45647,
    }

    if reserved in mapping:
        return mapping[reserved]

    def hit_wall(r, c):
        nonlocal n
        nonlocal visited
        try:
            return (((r + 1 == n or (visited[r - 1][c] and visited[r + 1][c])) and c - 1 >= 0 and
                     c + 1 < n and not visited[r][c - 1] and not visited[r][c + 1]) or
                    ((c + 1 == n or (visited[r][c - 1] and visited[r][c + 1])) and r - 1 >= 0 and
                     r + 1 < n and not visited[r - 1][c] and not visited[r + 1][c]) or
                    ((r == 0 or (visited[r + 1][c] and visited[r - 1][c])) and c - 1 >= 0 and
                     c + 1 < n and not visited[r][c - 1] and not visited[r][c + 1]) or
                    ((c == 0 or (visited[r][c + 1] and visited[r][c - 1])) and r - 1 >= 0 and
                     r + 1 < n and not visited[r - 1][c] and not visited[r + 1][c]))
        except IndexError:
            return False

    def move(r, c):
        nonlocal n
        nonlocal ans
        nonlocal visited
        nonlocal reserved
        nonlocal steps

        if r == n - 1 and c == 0:
            ans += (steps == n * n - 1)
            return

        if hit_wall(r, c):
            return

        visited[r][c] = True

        rs = reserved[steps]
        if rs != '?':
            if rs == 'U' and r - 1 >= 0 and not visited[r - 1][c]:
                steps += 1
                move(r - 1, c)
                steps -= 1

            elif rs == 'R' and c + 1 < n and not visited[r][c+1]:
                steps += 1
                move(r, c + 1)
                steps -= 1
            elif rs == 'D' and r + 1 < n and not visited[r + 1][c]:
                steps += 1
                move(r + 1, c)
                steps -= 1
            elif rs == 'L' and c - 1 >= 0 and not visited[r][c - 1]:
                steps += 1
                move(r, c - 1)
                steps -= 1

            visited[r][c] = False
            return

        if r + 1 < n and not visited[r + 1][c]:
            steps += 1
            move(r + 1, c)
            steps -= 1

        if c + 1 < n and not visited[r][c + 1]:
            steps += 1
            move(r, c + 1)
            steps -= 1

        if r - 1 >= 0 and not visited[r - 1][c]:
            steps += 1
            move(r - 1, c)
            steps -= 1

        if c - 1 >= 0 and not visited[r][c - 1]:
            steps += 1
            move(r, c - 1)
            steps -= 1

        visited[r][c] = False

    n = 7
    visited = [[False for _ in range(n)] for _ in range(n)]

    ans = 0
    steps = 0
    move(0, 0)
    return ans


def main():
    print(f(input()))


main()
